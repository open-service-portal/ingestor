{{!--
  Default Steps Template
  Generates the steps section for Backstage scaffolder templates
  Works with both namespaced and cluster-scoped resources

  Available variables:
  - xrd: The full XRD object
  - metadata: Extraction metadata
  - helpers: Utility functions
  - source: Source of the XRD
  - timestamp: When extracted
--}}
- id: workflow-info
  name: Direct Apply Workflow Information
  action: debug:log
  input:
    message: |
      ‚ö° This template uses direct apply workflow:

      1. Creates your {{xrd.spec.names.kind}} resource immediately in the cluster
      2. Registers the resource in the Backstage catalog

      Your resource will be created as soon as you click Create.
  output:
    text:
      - title: "‚ö° Direct Apply Workflow"
        content: |
          This template follows a **direct apply workflow** for immediate resource creation:

          **What happens when you click Create:**

          1. **Create Resource Immediately** üöÄ
             - Your {{xrd.spec.names.kind}} resource is created directly in the Kubernetes cluster
             - No approval required - resource is active immediately
             - Applied to cluster: `{{metadata.cluster}}`
             {{#if (eq xrd.spec.scope "Namespaced")}}
             - Created in namespace: `${{ parameters.namespace }}`
             {{/if}}

          2. **Register in Catalog** üìù
             - The resource is automatically registered in the Backstage software catalog
             - You can track and manage it through Backstage

          **‚úÖ Important**: Your resource is **created immediately** without approval workflow.

- id: create-resource
  name: Create {{xrd.spec.names.kind}}
  action: kube:apply
  input:
    manifest: |
      apiVersion: {{xrd.spec.group}}/{{xrd.spec.versions.[0].name}}
      kind: {{xrd.spec.names.kind}}
      metadata:
        name: {{backstageVar "parameters.name"}}
{{#if (eq xrd.spec.scope "Namespaced")}}
        namespace: {{backstageVar "parameters.namespace"}}
{{/if}}
      spec: {{backstageVar "parameters"}}
    namespaced: {{#if (eq xrd.spec.scope "Namespaced")}}true{{else}}false{{/if}}
  output:
    text:
      - title: Resource Details
        content: |
          **Resource Created Successfully!** ‚úÖ

          **Resource Information:**
          - **Name**: `${{ parameters.name }}`
          - **Type**: {{xrd.spec.names.kind}}
          - **API Version**: {{xrd.spec.group}}/{{xrd.spec.versions.[0].name}}
          - **Cluster**: {{metadata.cluster}}
          {{#if (eq xrd.spec.scope "Namespaced")}}
          - **Namespace**: `${{ parameters.namespace }}`
          {{else}}
          - **Scope**: Cluster-wide
          {{/if}}

          Your resource is now active in the cluster and ready to use.

- id: register
  name: Register in Catalog
  action: catalog:register
  input:
    repoContentsUrl: {{backstageVar "steps.create-resource.output.repoContentsUrl"}}
    catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: View in Catalog
        icon: catalog
        url: {{{backstageVar "steps['register'].output.entityRef"}}}
    text:
      - title: Catalog Registration
        content: |
          **Registered in Backstage Catalog** üìù

          Your {{xrd.spec.names.kind}} resource has been added to the software catalog.
          You can now track, monitor, and manage it through Backstage.
