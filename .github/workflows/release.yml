name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Release version: $VERSION"

      - name: Create release branch
        id: branch
        run: |
          BRANCH_NAME="release/${{ steps.version.outputs.tag }}"
          git checkout -b "$BRANCH_NAME"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Created branch: $BRANCH_NAME"

      - name: Update version and changelog
        run: |
          ./.github/scripts/prepare-release.sh "${{ steps.version.outputs.version }}"

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json CHANGELOG.md
          git commit -m "chore: release ${{ steps.version.outputs.tag }}"
          git push origin "${{ steps.branch.outputs.name }}"
          echo "‚úÖ Pushed release branch"

      - name: Create Pull Request
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const tag = '${{ steps.version.outputs.tag }}';

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: release ${tag}`,
              head: '${{ steps.branch.outputs.name }}',
              base: 'main',
              body: `## Release ${tag}

### üì¶ Version ${version}

This PR was automatically created by the release workflow.

**What's included:**
- ‚úÖ Version updated in package.json (${version})
- ‚úÖ CHANGELOG.md updated with release date

**After merging this PR:**
1. GitHub release will be created automatically (see workflow)
2. npm publish workflow will trigger
3. Package version ${version} will be published to npm

**To complete release:**
1. Review changes in this PR
2. Ensure tests pass
3. Merge this PR
4. Release and publish happen automatically!

---

‚ö†Ô∏è **Note:** Do NOT delete the tag \`${tag}\`. The GitHub release workflow depends on it.`
            });

            core.setOutput('number', pr.number);
            core.setOutput('url', pr.html_url);
            console.log(`‚úÖ Created PR #${pr.number}: ${pr.html_url}`);
            return pr.number;

      - name: Wait for PR to be merged
        id: wait_merge
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.create_pr.outputs.result }};
            const maxAttempts = 120; // 10 minutes (5 sec intervals)
            let attempts = 0;

            console.log(`‚è≥ Waiting for PR #${prNumber} to be merged...`);
            console.log('This workflow will wait up to 10 minutes.');
            console.log('You can merge the PR manually or let it auto-merge if configured.');

            while (attempts < maxAttempts) {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.merged) {
                console.log(`‚úÖ PR #${prNumber} was merged!`);
                core.setOutput('merged', 'true');
                return true;
              }

              if (pr.state === 'closed' && !pr.merged) {
                core.setFailed(`‚ùå PR #${prNumber} was closed without merging`);
                return false;
              }

              attempts++;
              if (attempts % 12 === 0) {
                console.log(`‚è≥ Still waiting... (${attempts * 5 / 60} minutes elapsed)`);
              }
              await new Promise(resolve => setTimeout(resolve, 5000));
            }

            console.log(`‚è±Ô∏è Timeout waiting for PR merge`);
            console.log(`The GitHub release will NOT be created automatically.`);
            console.log(`Please merge PR #${prNumber} and create the release manually.`);
            core.setOutput('merged', 'false');
            return false;

      - name: Create GitHub Release
        if: steps.wait_merge.outputs.merged == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ steps.version.outputs.tag }}';
            const fs = require('fs');

            // Extract changelog for this version
            let releaseNotes = 'See CHANGELOG.md for details.';

            try {
              const changelog = fs.readFileSync('CHANGELOG.md', 'utf8');
              const versionPattern = new RegExp(`## v${tag.replace('v', '')}[\\s\\S]*?(?=## |$)`);
              const match = changelog.match(versionPattern);

              if (match) {
                releaseNotes = match[0];
              }
            } catch (error) {
              console.log('‚ö†Ô∏è  Could not extract changelog:', error.message);
            }

            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });

            console.log(`‚úÖ Created GitHub release: ${release.html_url}`);
            console.log(`üì¶ npm publish workflow will trigger automatically`);
